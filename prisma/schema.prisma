// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       Boolean   @default(false)
  password            String?

  fullName            String?

  activities          Activity[]
  
  CV                  CV?
  portfolio           Portfolio?
  
  profile             Profile?

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Activity {
  id                  String    @id @default(cuid())
  type                String

  createdAt           DateTime   @default(now())

  userId              String
  user                User      @relation(fields: [userId], references: [id])
}


model CV {
  id                  String    @id @default(cuid())

  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id])

  templateId          String
  template            CVTemplate  @relation(fields: [templateId], references: [id])

}

model CVTemplate {
  id                  String    @id @default(cuid())
  name                String    @unique
  description         String

  cvs                 CV[] 
}

model Portfolio {
  id                  String    @id @default(cuid())
  url                 String    @unique

  active              Boolean   @default(true)

  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id])

  templateId          String
  template            PortfolioTemplate  @relation(fields: [templateId], references: [id])
}

model PortfolioTemplate {
  id                  String    @id @default(cuid())
  name                String    @unique
  description         String

  portfolios          Portfolio[] 
}

model Profile {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String

  publicId            String   

  headline            String?
  summary             String?

  profilePictureUrl    String?
  backgroundPictureUrl String?

  birthDay            Int?
  birthMonth          Int?
  industryName        String?

  student             Boolean @default(false)

  locationName        String?
  geoCountryName      String?
  geoLocationName     String?

  userMockedId        String? 

  userId              String? @unique
  user                User?   @relation(fields: [userId], references: [id])

  @@unique([publicId, userMockedId])

  experiences         Experience[]
  education           Education[]
  languages           Launguages[]
  publications        Publication[]
  certifications      Certification[]
  volunteer           Volunteer[]
  honors              Honor[]
  projects            Project[]
  skills              Skill[]
  

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Experience {
  id            String    @id @default(cuid())
  title         String
  description   String?

  startDate     DateTime?
  endDate       DateTime?

  locationName        String?
  geoLocationName     String?

  companyName         String?
  companyLogoUrl      String?
  companyEmployees    String?
  companyIndustries   String[]

  profile       Profile   @relation(fields: [profileId], references: [id])
  profileId     String
}

model Education {
  id              String    @id @default(cuid())

  schoolName       String
  schoolLogoUrl    String?

  degreeName      String?
  grade           String?
  fieldOfStudy    String?
  
  startYear       Int?
  endYear         Int?

  activities      String?
  description     String?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Launguages {
  id              String    @id @default(cuid())
  name            String
  proficiency     String?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Publication {
  id              String    @id @default(cuid())
  name            String
  publisher       String?
  description     String?
  url             String?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Certification {
  id              String    @id @default(cuid())
  authority       String
  name            String
  url             String // This can be used img sometimes

  startDate       DateTime?
  endDate         DateTime?

  companyName         String?
  companyLogoUrl      String?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Volunteer{
  id              String    @id @default(cuid())
  role            String
  description     String?

  cause           String?

  startDate       DateTime?
  endDate         DateTime?

  companyName     String?
  companyLogoUrl  String?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Honor {
  id              String    @id @default(cuid())
  title           String
  description     String?

  issueDate       DateTime?
  issuer          String?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Project {
  id              String    @id @default(cuid())
  title           String
  description     String?

  startDate       DateTime?
  endDate         DateTime?

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}

model Skill {
  id              String    @id @default(cuid())
  name            String

  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
}